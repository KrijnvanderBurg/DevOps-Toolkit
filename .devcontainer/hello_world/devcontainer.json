// https://containers.dev/implementors/json_reference/
{
	"name": "hello_world",
	"dockerComposeFile": [
		"../docker-compose.yml"
	],
	"service": "app",
	"workspaceFolder": "/workspace/hello_world",
	"remoteUser": "vscode",
	"containerUser": "vscode",
	//
	// Features - https://containers.dev/implementors/features.
	//
	"features": {
		"ghcr.io/devcontainers/features/python:1": {
			"version": 3.11,
			// Other required packages are installed via onCreateCommand,
			// since toolsToInstall uses pipx which cannot install libraries
			"toolsToInstall": ""
		},
		"ghcr.io/devcontainers-contrib/features/poetry:2": {
			"version": "latest"
		},
		// NodeJS only necessary for SonarLint extension, specifically to analyse .json files.
		// NoseJS can be safely removed, it only results in a pop-up error from sonarlint saying it cannot review .json files without nodejs.
		"ghcr.io/devcontainers/features/node:1": {
			"version": "latest"
		}
	},
	"containerEnv": {
		"PYTHONFAULTHANDLER": "1",
		"PYTHONUNBUFFERED": "1",
		"PYTHONHASHSEED": "42",
		"PIP_DISABLE_PIP_VERSION_CHECK": "1",
		"PIP_DEFAULT_TIMEOUT": "100",
		"POETRY_NO_INTERACTION": "1"
		// "POETRY_VIRTUALENVS_IN_PROJECT": "true"
		// "POETRY_VIRTUALENVS_CREATE": "false",
	},
	// "portsAttributes": {
	// 	"4040": {
	// 		"label": "SparkUI",
	// 		"onAutoForward": "notify"
	// 	}
	// },
	// "forwardPorts": [
	// 	4040
	// ],
	"postCreateCommand": "bash /workspace/.devcontainer/hello_world/post_create_command.sh",
	"postStartCommand": "bash /workspace/.devcontainer/hello_world/post_start_command.sh",
	"customizations": {
		"vscode": {
			"extensions": [
				// Python
				// "ms-python.python", // https://marketplace.visualstudio.com/items?itemName=ms-python.python
				"ms-python.vscode-pylance", // https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance
				// Linter
				"charliermarsh.ruff", //https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
				// "ms-python.black-formatter", // https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter
				"ms-python.pylint", // https://marketplace.visualstudio.com/items?itemName=ms-python.pylint
				// "ms-python.isort", // https://marketplace.visualstudio.com/items?itemName=ms-python.isort
				"ms-python.flake8", // https://marketplace.visualstudio.com/items?itemName=ms-python.flake8
				"ms-python.mypy-type-checker", // https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker
				"sonarsource.sonarlint-vscode", // https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode
				// Coverage
				"ryanluker.vscode-coverage-gutters",
				// Scanner
				"nwgh.bandit", // https://marketplace.visualstudio.com/items?itemName=nwgh.bandit
				"ms-cst-e.vscode-devskim", // https://marketplace.visualstudio.com/items?itemName=MS-CST-E.vscode-devskim
				// Tools
				"ms-azuretools.vscode-docker", // https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker
				"eamodio.gitlens", // https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens
				"dvirtz.parquet-viewer", // https://marketplace.visualstudio.com/items?itemName=dvirtz.parquet-viewer
				"tamasfe.even-better-toml", // https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml
				"ms-azure-devops.azuredevops", // https://marketplace.visualstudio.com/items?itemName=ms-azure-devops.azuredevops
				// Copilot
				"GitHub.copilot", // https://marketplace.visualstudio.com/items?itemName=GitHub.copilot
				"GitHub.copilot-chat" // https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat
			],
			"settings": {
				//
				// Git - search gitignore in parent monorepo folder
				//
				"git.openRepositoryInParentFolders": "always",
				"search.useIgnoreFiles": true,
				"search.useParentIgnoreFiles": true,
				// Python
				// "[python]": {
				// 	"editor.defaultFormatter": "ms-python.black-formatter",
				// 	"editor.formatOnSave": true,
				// 	"editor.codeActionsOnSave": {
				// 		"source.organizeImports": "explicit"
				// 	}
				// },
				// "[python]": {
				"editor.defaultFormatter": "charliermarsh.ruff",
				"editor.formatOnSave": true,
				"editor.codeActionsOnSave": {
					"source.fixAll": "explicit",
					"source.organizeImports": "explicit"
				},
				//
				// Ruff - https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
				//
				"ruff.lint.args": [
					"--config=${workspaceFolder}/../.tools/ruff.toml"
				],
				"ruff.format.args": [
					"--config=${workspaceFolder}/../.tools/ruff.toml"
				],
				"ruff.organizeImports": true,
				"ruff.fixAll": true,
				//
				// Python/Pytest - https://code.visualstudio.com/docs/python/settings-reference
				//
				"python.defaultInterpreterPath": "~/.cache/pypoetry/virtualenvs",
				"python.venvPath": "/workspace/**/.venv",
				"python.testing.autoTestDiscoverOnSaveEnabled": true,
				"python.testing.unittestEnabled": false,
				"python.testing.pytestEnabled": true,
				"python.testing.pytestArgs": [
					"-c",
					"${workspaceFolder}/../.tools/pytest.ini",
					"-o",
					"cache_dir=${workspaceFolder}/.pytest_cache",
					"-s",
					"--cache-clear",
					"--cov=./",
					"--cov-report=xml:./coverage.xml",
					"--cov-config=${workspaceFolder}/../.tools/.coveragerc"
				],
				"python.languageServer": "Default",
				//
				// Pylance - https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance
				//
				"python.analysis.typeCheckingMode": "strict", // 'off' (default), 'basic', 'strict'
				"python.analysis.diagnosticMode": "openFilesOnly", // 'openFilesOnly' (default), 'workspace'
				"python.analysis.diagnosticSeverityOverrides": {
					// https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
					"reportUnknownParameterType": false,
					"reportUnknownArgumentType": false,
					"reportUnknownVariableType": false,
					"reportUnknownMemberType": false,
					"reportMissingParameterType": false,
					"reportMissingTypeArgument": false,
					"reportGeneralTypeIssues": false
				},
				"python.analysis.completeFunctionParens": true,
				"python.analysis.inlayHints.variableType": true,
				"python.analysis.inlayHints.functionReturnTypes": true,
				"python.analysis.inlayHints.callArgumentName": true,
				"python.analysis.inlayHints.pytestParameters": true,
				//
				// SonarLint - https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode
				//
				"sonarlint.rules": {},
				"sonarlint.testFilePattern": "**/tests/**,test_*.py, *_test.py",
				"sonarlint.disableTelemetry": true,
				"sonarlint.output.showAnalyzerLogs": true,
				// "sonarlint.connectedMode.project": {},
				// "sonarlint.connectedMode.connections.sonarqube": [
				//     {
				//         "connectionId": "",
				//         "serverUrl": "",
				//         "token": ""
				//     }
				// ],
				// "sonarlint.connectedMode.connections.sonarcloud": [],
				// ...
				//
				// Docker - https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker
				// No settings exist
				//
				// //
				// // Black - https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter
				// //
				// "black-formatter.args": [
				// 	"--config",
				// 	"${workspaceFolder}/../.tools/.black"
				// ],
				// "black-formatter.cwd": "${workspaceFolder}",
				// "black-formatter.enabled": true,
				// "black-formatter.showNotification": "onError", // 'off' (default), 'onWarning', 'onError', 'always'
				//
				// Pylint - https://marketplace.visualstudio.com/items?itemName=ms-python.pylint
				//
				"pylint.args": [
					"--rcfile",
					"${workspaceFolder}/../.tools/.pylintrc"
				],
				"pylint.path": [
					"${interpreter}",
					"-m",
					"pylint"
				],
				"pylint.cwd": "${workspaceFolder}",
				"pylint.enabled": true,
				"pylint.showNotification": "onError", // 'off' (default), 'onWarning', 'onError', 'always'
				"pylint.lintOnChange": false, // keep false, its unusable slow.
				// //
				// // Isort - https://marketplace.visualstudio.com/items?itemName=ms-python.isort
				// // Does not work on code save, can trigger by alt+shift+o
				// //
				// "isort.args": [
				// 	"--settings-path",
				// 	"${workspaceFolder}/../.tools/.isort.cfg"
				// ],
				// "isort.serverEnabled": false,
				// "isort.check": false,
				// "isort.showNotification": "onError", // 'off' (default), 'onWarning', 'onError', 'always'
				//
				// Flake8 - https://marketplace.visualstudio.com/items?itemName=ms-python.flake8
				//
				"flake8.args": [
					"--config",
					"${containerWorkspaceFolder}/../.tools/.flake8" // default "--config=${workspaceFolder}/.flake8"
				],
				"flake8.cwd": "${workspaceFolder}", // default ${workspaceFolder}
				"flake8.showNotification": "onError", // 'off' (default), 'onWarning', 'onError', 'always'
				"flake8.enabled": true,
				//
				// Mypy - https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker
				//
				"mypy-type-checker.args": [
					"--config-file",
					"${workspaceFolder}/../.tools/.mypy.ini"
				],
				"mypy-type-checker.cwd": "${workspaceFolder}",
				"mypy-type-checker.enabled": true,
				"mypy-type-checker.showNotifications": "onError", // 'off' (default), 'onWarning', 'onError', 'always'
				"mypy-type-checker.reportingScope": "file", // 'file' (default), 'workspace'
				"mypy-type-checker.preferDaemon": false, // set to true if reportingScope is workspace
				//
				// Bandit - https://marketplace.visualstudio.com/items?itemName=nwgh.bandit
				//
				"bandit.args": [
					"-c",
					"${workspaceFolder}/../.tools/.bandit"
				],
				"bandit.cwd": "${workspaceFolder}",
				"bandit.logLevel": "warning", // 'error' (default), 'warning'
				"bandit.enabled": true,
				"bandit.showNotification": "onError", // 'off' (default), 'onWarning', 'onError', 'always'
				//
				// Auto docstring - https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring
				//
				"autoDocstring.docstringFormat": "google",
				"autoDocstring.generateDocstringOnEnter": true,
				"autoDocstring.includeName": false,
				"autoDocstring.startOnNewLine": true,
				"autoDocstring.guessTypes": true,
				"autoDocstring.quoteStyle": "\"\"\"",
				//
				// VsCode Tasks
				//
				"tasks": {
					// https://code.visualstudio.com/docs/editor/tasks#vscode
					"version": "2.0.0",
					"options": {
						"env": {
							"PYTEST_ADDOPTS": "-vv --tb=native"
						}
					},
					"tasks": [
						{
							"label": "Poetry Lock",
							"type": "shell",
							"command": "poetry",
							"args": [
								"lock",
								"--no-update"
							],
							"runOptions": {
								"runOn": "folderOpen"
							},
							"presentation": {
								"panel": "shared",
								"clear": true,
							},
							"group": "install",
							"problemMatcher": []
						},
						{
							"label": "Poetry Install",
							"type": "shell",
							"command": "poetry",
							"args": [
								"install",
								"--no-interaction",
								"--no-ansi",
								"--directory=./",
								"--with=test"
							],
							"dependsOn": [
								"Poetry Lock"
							],
							"runOptions": {
								"runOn": "folderOpen"
							},
							"presentation": {
								"panel": "shared"
							},
							"group": "install",
							"problemMatcher": []
						},
						// {
						// 	"label": "Run pytest",
						// 	"type": "shell",
						// 	"command": "poetry",
						// 	"args": [
						// 		"run",
						// 		"pytest",
						// 		"./src/",
						// 		"./tests/unit/",
						// 		"-o",
						// 		"cache_dir=${workspaceFolder}/.pytest_cache",
						// 		"-s",
						// 		"-c=${workspaceFolder}/../.tools/pytest.ini",
						// 		"--cov=./",
						// 		"--cov-report=xml:./coverage.xml",
						// 		"--cov-config=../.tools/.coveragerc"
						// 	],
						// 	"dependsOn": [
						// 		"Poetry Install"
						// 	],
						// 	"runOptions": {
						// 		"runOn": "folderOpen"
						// 	},
						// 	"presentation": {
						// 		"panel": "dedicated"
						// 	},
						// 	"problemMatcher": []
						// },
						{
							"label": "Pytest & Coverage",
							"type": "shell",
							"command": "${workspaceFolder}/../.tools/commands/pytest_and_coverage.sh",
							"args": [
								"--target_path=${workspaceFolder}",
								"--config_filepath_pytest=${workspaceFolder}/../.tools/pytest.ini",
								"--config_filepath_coverage=${workspaceFolder}/../.tools/.coveragerc",
								"--output_filepath=${workspaceFolder}/coverage.xml"
							],
							"presentation": {
								"panel": "dedicated"
							},
							"runOptions": {
								"runOn": "folderOpen"
							}
						},
						{
							"label": "TruffleHog Scan",
							"type": "shell",
							"command": "sh",
							"args": [
								"${workspaceFolder}/../.tools/commands/trufflehog.sh",
								"--target_path=${workspaceFolder}/../",
								"--config_filepath=${workspaceFolder}/../.tools/.trufflehog"
							],
							"presentation": {
								"panel": "dedicated"
							},
							"runOptions": {
								"runOn": "folderOpen"
							}
						},
						{
							"label": "Vulture Scan",
							"type": "shell",
							"command": "${workspaceFolder}/../.tools/commands/vulture.sh",
							"args": [
								"--target_path=${workspaceFolder}",
								"--config_filepath=${workspaceFolder}/../.tools/.vulture"
							],
							"presentation": {
								"panel": "dedicated"
							},
							"runOptions": {
								"runOn": "folderOpen"
							}
						},
						{
							"label": "Semgrep Scan",
							"type": "shell",
							"command": "${workspaceFolder}/../.tools/commands/semgrep.sh",
							"args": [
								"--target_path=${workspaceFolder}",
								"--config_filepath=${workspaceFolder}/../.tools/.semgrep",
								"--output_filepath=${workspaceFolder}/semgrep-junit.xml"
							],
							"presentation": {
								"panel": "dedicated"
							},
							"runOptions": {
								"runOn": "folderOpen"
							}
						}
					]
				}
			}
		}
	}
}
//
// Predefined Variables
//
// ${cwd} - the task runner's current working directory on startup
// ${workspaceFolder} - the path of the folder opened in VS Code
// ${workspaceRootFolderName} - the name of the folder opened in VS Code without any slashes (/)
// ${workspaceFolderBasename} - the name of the folder opened in VS Code without any slashes (/)
// ${file} - the current opened file
// ${relativeFile} - the current opened file relative to workspaceFolder
// ${relativeFileDirname} - the current opened file's dirname relative to workspaceFolder
// ${fileBasename} - the current opened file's basename
// ${fileBasenameNoExtension} - the current opened file's basename with no file extension
// ${fileDirname} - the current opened file's dirname
// ${fileExtname} - the current opened file's extension
// ${lineNumber} - the current selected line number in the active file
// ${selectedText} - the current selected text in the active file
// ${execPath} - the path to the running VS Code executable