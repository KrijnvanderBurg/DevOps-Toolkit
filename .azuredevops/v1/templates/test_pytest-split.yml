# https://docs.pytest.org

# Requirements:
# - Python version/architecture is set in pipeline

parameters:
- name: enabled
  type: boolean
  default: true
  
- name: continueOnError
  type: boolean
  default: false

- name: pythonVersion
  type: string

- name: pythonArchitecture
  type: string

- name: pythonProjectDirectory
  type: string

- name: testsPaths
  type: string

- name: coveragePath
  type: string

- name: pytestConfigFilepath
  type: string
  default: $(Build.Repository.LocalPath)/.tools/v1/configs/pytest.ini

- name: coverageConfigFilepath
  type: string
  default: $(Build.Repository.LocalPath)/.tools/v1/configs/.coveragerc

jobs:
  - job: TestSplit
    displayName: Pytest-split group 
    pool:
      vmImage: ubuntu-latest
    strategy:
      parallel: 3
    steps:
      - checkout: self

      - task: UsepythonVersion@0
        displayName: Agent set Python ${{ parameters.pythonVersion }} ${{ parameters.pythonArchitecture }}
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.pythonArchitecture }}

      - template: /.azuredevops/v1/templates/install_pip_editable.yml
        parameters:
          pythonProjectDirectory: ${{ parameters.pythonProjectDirectory }}

      - script: |
          pip install pytest pytest-cov pytest-azurepipelines pytest-xdist pytest-split

          pytest ${{ parameters.testsPaths }} \
          -c ${{ parameters.pytestConfigFilepath }} \
          --cov=${{ parameters.coveragePath }} \
          --cov-report=xml \
          --cov-config=${{ parameters.coverageConfigFilepath }} \
          --doctest-modules \
          --junit-xml=$(Build.StagingDirectory)/JUNIT-TEST.xml \
          --verbose \
          --splits $(System.TotalJobsInPhase) \
          --group $(System.JobPositionInPhase)
        displayName: Pytest (testing)
        enabled: ${{ parameters.enabled }}
        continueOnError: ${{ parameters.continueOnError }}
        condition: succeededOrFailed()
        env:
          COVERAGE_FILE: $(Build.StagingDirectory)/coverage/$(System.JobPositionInPhase).coverage

      - publish: $(Build.StagingDirectory)/coverage/$(System.JobPositionInPhase).coverage
        displayName: Publish $(System.JobPositionInPhase).coverage
        artifact: $(System.JobPositionInPhase).coverage
  
  - job: MergeCoverage
    displayName: Merge pytest-split coverage
    dependsOn: TestSplit
    condition: succeeded()
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          path: $(System.DefaultWorkingDirectory)

      - script: |
          pip install coverage

          coverage combine $(System.DefaultWorkingDirectory)/**/*.coverage

          coverage xml -o $(Build.StagingDirectory)/coverage.xml
        displayName: Merge coverage

        # Parse code coverage in readable format
      - task: PublishCodeCoverageResults@2
        displayName: Code overage publish results
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.StagingDirectory)/coverage.xml
          searchFolder: $(Common.TestResultsDirectory)
          pathToSources: ${{ parameters.coveragePath }}
          failIfCoverageEmpty: true
        enabled: ${{ parameters.enabled }}
        condition: succeededOrFailed()
