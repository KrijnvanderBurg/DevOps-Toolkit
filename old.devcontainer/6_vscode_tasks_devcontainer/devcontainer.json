// https://containers.dev/implementors/json_reference/
{
	"name": "6_vscode_tasks_devcontainer",
	"dockerComposeFile": [
		"./docker-compose.yml"
	],
	"service": "app",
	"workspaceFolder": "/workspace/hello_world",
	"remoteUser": "vscode",
	"containerUser": "vscode",
	//
	// Features - https://containers.dev/implementors/features.
	//
	"features": {
		"ghcr.io/devcontainers/features/python:1": {
			"version": "3.11",
			// Other required packages are installed via onCreateCommand,
			// since toolsToInstall uses pipx which cannot install libraries
			"installTools": false,
			"toolsToInstall": "" // set installTools to true again
		},
		"ghcr.io/devcontainers-contrib/features/poetry:2": {
			"version": "latest"
		},
		// NodeJS only necessary for SonarLint extension, specifically to analyse .json files.
		// NoseJS can be safely removed, it only results in a pop-up error from sonarlint saying it cannot review .json files without nodejs.
		"ghcr.io/devcontainers/features/node:1": {
			"version": "latest"
		},
		// dotnet only required for DevSkim code quality tool.
		"ghcr.io/devcontainers/features/dotnet:2": {
			"version": "8.0"
		},
		"ghcr.io/devcontainers/features/docker-outside-of-docker:1": {}
	},
	"mounts": [
		"source=devcontainer-bashhistory,target=/commandhistory,type=volume" // required for command history
	],
	//
	// ContainerEnv
	//
	"containerEnv": {
		"PYTHONFAULTHANDLER": "1",
		"PYTHONUNBUFFERED": "1",
		"PYTHONHASHSEED": "42",
		"PIP_DISABLE_PIP_VERSION_CHECK": "1",
		// "POETRY_NO_INTERACTION": "1",
		// "POETRY_VIRTUALENVS_IN_PROJECT": "true",
		// "POETRY_VIRTUALENVS_CREATE": "false",
	},
	// "onCreateCommand": {},
	// "updateContentCommand": {},
	// "postCreateCommand": {},
	"postStartCommand": {
		"zsh": "../.dotfiles/install.sh"
	},
	// "postAttachCommand": {},
	// "waitFor": "", // default updateContentCommand
	"customizations": {
		"vscode": {
			"extensions": [
				"charliermarsh.ruff", //https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
			],
			"settings": {
				"editor.tabSize": 4,
				//
				// Add the extension IDs you want to suppress
				//
				"extensions.unwantedRecommendations": [
					"ms-vscode.makefile-tools"
				],
				//
				// Terminal / zsh customisation
				//
				"workbench.startupEditor": "readme", // doesnt seem to consistently work in devcontainer
				"terminal.integrated.enableVisualBell": true,
				"terminal.integrated.defaultProfile.linux": "zsh",
				"terminal.integrated.profiles.linux": {
					"zsh": {
						"path": "zsh"
					}
				},
				//
				// Git - search gitignore in parent monorepo folder
				//
				"git.openRepositoryInParentFolders": "always",
				"search.useIgnoreFiles": true,
				"search.useParentIgnoreFiles": true,
				//
				// Python
				// 
				"editor.defaultFormatter": "charliermarsh.ruff",
				"editor.formatOnSave": true,
				"editor.codeActionsOnSave": {
					"source.fixAll": "explicit",
					"source.organizeImports": "explicit"
				},
				//
				// Ruff - https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
				//
				"ruff.lint.args": [
					"--config=${workspaceFolder}/../.tools/v1/configs/ruff.toml"
				],
				"ruff.format.args": [
					"--config=${workspaceFolder}/../.tools/v1/configs/ruff.toml"
				],
				"ruff.organizeImports": true,
				"ruff.fixAll": true,
				//
				// VsCode Tasks
				//
				"tasks": {
					// https://code.visualstudio.com/docs/editor/tasks#vscode
					"version": "2.0.0",
					"options": {
						"env": {
							"PYTEST_ADDOPTS": "-vv --tb=native"
						}
					},
					"tasks": [
						//
						// grouping tasks akin cicd
						// first run `setup` group in sequence, then `validate code` group in parallel
						//
						{
							"label": "CICD",
							"dependsOn": [
								"setup",
								"validate code"
							],
							"dependsOrder": "sequence",
							"runOptions": {
								"runOn": "folderOpen"
							},
							"problemMatcher": []
						},
						{
							"label": "setup",
							"dependsOn": [
								"poetry install"
							],
							// "dependsOrder": "sequence",
							"problemMatcher": []
						},
						{
							"label": "validate code",
							"dependsOn": [
								"ruff formatter",
								"ruff linter"
							],
							"problemMatcher": []
						},
						//
						// Setup environment
						//
						{
							"label": "poetry lock",
							"type": "shell",
							"command": "poetry",
							"args": [
								"lock",
								"--no-update"
							],
							"group": "install",
							"presentation": {
								"showReuseMessage": false
							},
							"problemMatcher": []
						},
						{
							"label": "poetry install",
							"type": "shell",
							"command": "poetry",
							"args": [
								"install",
								"--no-interaction",
								"--no-ansi",
								"--directory=./",
								"--with=test"
							],
							"dependsOn": [
								"poetry lock"
							],
							"presentation": {
								"panel": "shared"
							},
							"group": "install",
							"problemMatcher": []
						},
						//
						// Validate code
						//
						{
							"label": "ruff formatter",
							"type": "shell",
							"command": "${workspaceFolder}/../.tools/v1/commands/ruff_formatter.sh",
							"args": [
								"--target_path=${workspaceFolder}",
								"--config_filepath=${workspaceFolder}/../.tools/v1/configs/ruff.toml"
							],
							"presentation": {
								"panel": "dedicated",
								"clear": true
							}
						},
						{
							"label": "ruff linter",
							"type": "shell",
							"command": "${workspaceFolder}/../.tools/v1/commands/ruff_linter.sh",
							"args": [
								"--target_path=${workspaceFolder}",
								"--config_filepath=${workspaceFolder}/../.tools/v1/configs/ruff.toml"
							],
							"presentation": {
								"panel": "dedicated",
								"clear": true
							}
						},
					]
				}
			}
		}
	}
}
//
// Predefined Variables
//
// ${cwd} - the task runner's current working directory on startup
// ${workspaceFolder} - the path of the folder opened in VS Code
// ${workspaceRootFolderName} - the name of the folder opened in VS Code without any slashes (/)
// ${workspaceFolderBasename} - the name of the folder opened in VS Code without any slashes (/)
// ${file} - the current opened file
// ${relativeFile} - the current opened file relative to workspaceFolder
// ${relativeFileDirname} - the current opened file's dirname relative to workspaceFolder
// ${fileBasename} - the current opened file's basename
// ${fileBasenameNoExtension} - the current opened file's basename with no file extension
// ${fileDirname} - the current opened file's dirname
// ${fileExtname} - the current opened file's extension
// ${lineNumber} - the current selected line number in the active file
// ${selectedText} - the current selected text in the active file
// ${execPath} - the path to the running VS Code executable